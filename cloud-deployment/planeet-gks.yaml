# ===============================
# Namespace
# ===============================
apiVersion: v1
kind: Namespace
metadata:
  name: planeet

---
# ===============================
# Planeet Secrets
# ===============================
apiVersion: v1
kind: Secret
metadata:
  name: planeet-secrets
  namespace: planeet
type: Opaque
stringData:
  MONGO_URI: "mongodb://mongo:27017/planeet"
  GOOGLE_PLACES_API_KEY: "AIzaSyCPVz2SxWPbfrilbZ2wo8KcSlBNa8uPYPM"
---
# ===============================
# MongoDB PVC
# ===============================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: planeet
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard   # GKE default

---

# ===============================
# MongoDB Deployment
# ===============================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: planeet
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:5
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
          env:
            - name: MONGO_INITDB_DATABASE
              value: "planeet"
          resources:
            requests: {}
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc

---

# ===============================
# MongoDB Service
# ===============================
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: planeet
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: ClusterIP

---

# ===============================
# Outing Profile Service
# ===============================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: outing-profile-service
  namespace: planeet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: outing-profile-service
  template:
    metadata:
      labels:
        app: outing-profile-service
    spec:
      containers:
        - name: outing-profile-service
          image: nikaklimenchuk/outing-profile-service:v2.1
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_URI
              valueFrom:
                secretKeyRef:
                  name: planeet-secrets
                  key: MONGO_URI
          resources:
            requests: {}
            limits:
              memory: "128Mi"
              cpu: "100m"

---

apiVersion: v1
kind: Service
metadata:
  name: outing-profile-service
  namespace: planeet
spec:
  selector:
    app: outing-profile-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: ClusterIP

---

# ===============================
# Users Service
# ===============================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-service
  namespace: planeet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users-service
  template:
    metadata:
      labels:
        app: users-service
    spec:
      containers:
        - name: users-service
          image: liorberlin/users-service:v3.4.5
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATA_MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: planeet-secrets
                  key: MONGO_URI
            - name: OUTING_PROFILE_SERVICE_BASE_URL
              value: "http://outing-profile-service.planeet.svc.cluster.local"
          resources:
            requests: {}
            limits:
              memory: "512Mi"
              cpu: "200m"

---

apiVersion: v1
kind: Service
metadata:
  name: users-service
  namespace: planeet
spec:
  selector:
    app: users-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP

---

# ===============================
# Planning Service
# ===============================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: planning-service
  namespace: planeet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: planning-service
  template:
    metadata:
      labels:
        app: planning-service
    spec:
      containers:
        - name: planning-service
          image: dartoledano/planning-service:v1.0.6
          ports:
            - containerPort: 8001
          env:
            - name: VENUES_SERVICE_URL
              value: "http://venues-service.planeet.svc.cluster.local:8000"
            - name: OUTING_PROFILE_SERVICE_URL
              value: "http://outing-profile-service.planeet.svc.cluster.local:80"
          resources:
            requests: {}
            limits:
              memory: "128Mi"
              cpu: "100m"

---

apiVersion: v1
kind: Service
metadata:
  name: planning-service
  namespace: planeet
spec:
  selector:
    app: planning-service
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
  type: ClusterIP

---

# ===============================
# Venues Service
# ===============================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: venues-service
  namespace: planeet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: venues-service
  template:
    metadata:
      labels:
        app: venues-service
    spec:
      containers:
        - name: venues-service
          image: dartoledano/venues-service:v1.5.1
          ports:
            - containerPort: 8000
          env:
            - name: GOOGLE_PLACES_API_KEY
              valueFrom:
                secretKeyRef:
                  name: planeet-secrets
                  key: GOOGLE_PLACES_API_KEY
            - name: PLANNING_SERVICE_URL
              value: "http://planning-service.planeet.svc.cluster.local:8001"
            - name: MONGO_URI
              valueFrom:
                secretKeyRef:
                  name: planeet-secrets
                  key: MONGO_URI
          resources:
            requests: {}
            limits:
              memory: "128Mi"
              cpu: "100m"

---

apiVersion: v1
kind: Service
metadata:
  name: venues-service
  namespace: planeet
spec:
  selector:
    app: venues-service
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP

---

# ===============================
# UI Service
# ===============================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui-service
  namespace: planeet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui-service
  template:
    metadata:
      labels:
        app: ui-service
    spec:
      containers:
        - name: ui-service
          image: nikaklimenchuk/planeet-ui:react-v1.9.27
          ports:
            - containerPort: 80
          env:
            - name: ENVIRONMENT
              value: "kubernetes"
            - name: REACT_APP_ENVIRONMENT
              value: "production"
          resources:
            requests: {}
            limits:
              memory: "64Mi"
              cpu: "50m"

---

apiVersion: v1
kind: Service
metadata:
  name: ui-service
  namespace: planeet
spec:
  selector:
    app: ui-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
# ===============================
# Users Ingress (fixed trailing slash)
# ===============================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: users-ingress
  namespace: planeet
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /users$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /api/users(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: users-service
                port:
                  number: 80
---
# ===============================
# Planning Ingress
# ===============================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: planning-ingress
  namespace: planeet
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /api/planning(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: planning-service
                port:
                  number: 8001
---
# ===============================
# Venues Ingress
# ===============================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: venues-ingress
  namespace: planeet
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /venues/$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /api/venues(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: venues-service
                port:
                  number: 8000
---
# ===============================
# Outing Profile Ingress
# ===============================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: outing-ingress
  namespace: planeet
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /api/outing(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: outing-profile-service
                port:
                  number: 80
---
# ===============================
# UI Ingress
# ===============================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ui-ingress
  namespace: planeet
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: ui-service
                port:
                  number: 80